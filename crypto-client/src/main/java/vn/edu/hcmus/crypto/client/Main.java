package vn.edu.hcmus.crypto.client;

import java.io.IOException;
import java.security.KeyPair;
import java.util.Arrays;
import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import retrofit2.Call;
import retrofit2.Retrofit;
import vn.edu.hcmus.crypto.algorithm.AbstractAlgorithm;
import vn.edu.hcmus.crypto.algorithm.AdvancedEncryptionStandardAlgorithm;
import vn.edu.hcmus.crypto.algorithm.DataEncryptionAlgorithm;
import vn.edu.hcmus.crypto.algorithm.TripleDES;
import vn.edu.hcmus.crypto.exchange.DiffieHellmanKeyExchange;
import vn.edu.hcmus.crypto.exchange.ExchangeUtils;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Main {
    private static final String SERVER_ADDRESS = "http://localhost:8081";
    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);
    public static void main(final String[] args) throws IOException {
        final Retrofit retrofit = Utilities.getRetrofit(SERVER_ADDRESS);
        final Apis api = retrofit.create(Apis.class);
        Call<String> request = api.getPublicKey();
        String response = request.execute().body();
        LOGGER.info("Obtained public key from server: " + response);
        
        
        final DiffieHellmanKeyExchange dhke = createDH();
        dhke.setOtherPublicKey(dhke.decodePublicKeyFromString(response));
        
        request = api.registerKey(dhke.encodePublicKeyToString());
        response = request.execute().body();
        LOGGER.info("Send public key to server: " + response);
        
        dhke.agreeSecretKey();
        request = api.agreeKey();
        response = request.execute().body();
        LOGGER.info("Agree on key with server: " + response);
        
        try(Scanner scanner = new Scanner(System.in))
        {
            AbstractAlgorithm algorithm;
            final String algorithmName = getValueFromScanner(scanner, "Choose an algorithm : DES, 3DES, AES : ");
            if (algorithmName.equals("DES")) {
                algorithm = new DataEncryptionAlgorithm(Arrays.asList(dhke.generateSecretBySize(64)));
            }
            else if (algorithmName.equals("3DES")) {
                algorithm = new TripleDES(Arrays.asList(dhke.generateSecretBySize(192)));
            }
            else {
                algorithm = new AdvancedEncryptionStandardAlgorithm(Arrays.asList(dhke.generateSecretBySize(128)));
            }
            request = api.changeAlgorithm(algorithmName);
            response = request.execute().body();
            LOGGER.info("Register algorithm with server: " + response);
            
            while(true)
            {
                final String message = getValueFromScanner(scanner, "Enter message :");
                final String ecryptedMessage = algorithm.encrypt(message);
                LOGGER.info("Encrypted message: " + ecryptedMessage);
                request = api.message(algorithm.encrypt(message));
                response = request.execute().body();
                LOGGER.info("Decrypted from server: " + response);
            }
        }
    }
    
    private static String getValueFromScanner(final Scanner scanner, final String message)
    {
        System.out.println(message);
        return scanner.nextLine();
    }
    
    private static DiffieHellmanKeyExchange createDH()
    {
        final KeyPair kp = ExchangeUtils.getKeyPairGenerator().generateKeyPair();
        return new DiffieHellmanKeyExchange(kp.getPublic(), kp.getPrivate());
    }
}
